/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
export type UsersControllerFindParams = { filter?: UserFilter1 };

export type UsersControllerUpdateAllParams = { where?: { [key: string]: any } };

export type UsersControllerFindByIdParams = { filter?: UserFilter };

export type UsersControllerCountParams = { where?: { [key: string]: any } };

export type ProductsControllerFindParams = { filter?: ProductsFilter1 };

export type ProductsControllerUpdateAllParams = { where?: { [key: string]: any } };

export type ProductsControllerFindByIdParams = { filter?: ProductsFilter };

export type ProductsControllerCountParams = { where?: { [key: string]: any } };

export type InventoryControllerFindParams = { filter?: InventoryFilter1 };

export type InventoryControllerUpdateAllParams = { where?: { [key: string]: any } };

export type InventoryControllerFindByIdParams = { filter?: InventoryFilter };

export type InventoryControllerCountParams = { where?: { [key: string]: any } };

export type CategoriesControllerFindParams = { filter?: CategoryFilter1 };

export type CategoriesControllerUpdateAllParams = { where?: { [key: string]: any } };

export type CategoriesControllerFindByIdParams = { filter?: CategoryFilter };

export type CategoriesControllerCountParams = { where?: { [key: string]: any } };

export type UserFilter1FieldsOneOf = {
  _id?: boolean;
  [key: string]: any;
 };

export type UserFilter1Fields = UserFilter1FieldsOneOf | string[];

export type UserFilter1Where = { [key: string]: any };

export type UserFilter1Order = string | string[];

export interface UserFilter1 {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: UserFilter1Order;
  where?: UserFilter1Where;
  fields?: UserFilter1Fields;
}

export type UserFilterFieldsOneOf = {
  _id?: boolean;
  [key: string]: any;
 };

export type UserFilterFields = UserFilterFieldsOneOf | string[];

export type UserFilterOrder = string | string[];

export interface UserFilter {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: UserFilterOrder;
  fields?: UserFilterFields;
}

export type ProductsFilter1FieldsOneOfTwoItem = typeof ProductsFilter1FieldsOneOfTwoItem[keyof typeof ProductsFilter1FieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductsFilter1FieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type ProductsFilter1FieldsOneOf = {
  _id?: boolean;
};

export type ProductsFilter1Fields = ProductsFilter1FieldsOneOf | ProductsFilter1FieldsOneOfTwoItem[];

export type ProductsFilter1Where = { [key: string]: any };

export type ProductsFilter1Order = string | string[];

export interface ProductsFilter1 {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: ProductsFilter1Order;
  where?: ProductsFilter1Where;
  fields?: ProductsFilter1Fields;
}

export type ProductsFilterFieldsOneOfTwoItem = typeof ProductsFilterFieldsOneOfTwoItem[keyof typeof ProductsFilterFieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductsFilterFieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type ProductsFilterFieldsOneOf = {
  _id?: boolean;
};

export type ProductsFilterFields = ProductsFilterFieldsOneOf | ProductsFilterFieldsOneOfTwoItem[];

export type ProductsFilterOrder = string | string[];

export interface ProductsFilter {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: ProductsFilterOrder;
  fields?: ProductsFilterFields;
}

export type PingResponseHeaders = {
  'Content-Type'?: string;
  [key: string]: any;
 };

export interface PingResponse {
  greeting?: string;
  date?: string;
  url?: string;
  headers?: PingResponseHeaders;
}

export type InventoryFilter1FieldsOneOfTwoItem = typeof InventoryFilter1FieldsOneOfTwoItem[keyof typeof InventoryFilter1FieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InventoryFilter1FieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type InventoryFilter1FieldsOneOf = {
  _id?: boolean;
};

export type InventoryFilter1Fields = InventoryFilter1FieldsOneOf | InventoryFilter1FieldsOneOfTwoItem[];

export type InventoryFilter1Where = { [key: string]: any };

export type InventoryFilter1Order = string | string[];

export interface InventoryFilter1 {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: InventoryFilter1Order;
  where?: InventoryFilter1Where;
  fields?: InventoryFilter1Fields;
}

export type InventoryFilterFieldsOneOfTwoItem = typeof InventoryFilterFieldsOneOfTwoItem[keyof typeof InventoryFilterFieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InventoryFilterFieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type InventoryFilterFieldsOneOf = {
  _id?: boolean;
};

export type InventoryFilterFields = InventoryFilterFieldsOneOf | InventoryFilterFieldsOneOfTwoItem[];

export type InventoryFilterOrder = string | string[];

export interface InventoryFilter {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: InventoryFilterOrder;
  fields?: InventoryFilterFields;
}

export type CategoryFilter1FieldsOneOfTwoItem = typeof CategoryFilter1FieldsOneOfTwoItem[keyof typeof CategoryFilter1FieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFilter1FieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type CategoryFilter1FieldsOneOf = {
  _id?: boolean;
};

export type CategoryFilter1Fields = CategoryFilter1FieldsOneOf | CategoryFilter1FieldsOneOfTwoItem[];

export type CategoryFilter1Where = { [key: string]: any };

export type CategoryFilter1Order = string | string[];

export interface CategoryFilter1 {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: CategoryFilter1Order;
  where?: CategoryFilter1Where;
  fields?: CategoryFilter1Fields;
}

export type CategoryFilterFieldsOneOfTwoItem = typeof CategoryFilterFieldsOneOfTwoItem[keyof typeof CategoryFilterFieldsOneOfTwoItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFilterFieldsOneOfTwoItem = {
  _id: '_id',
} as const;

export type CategoryFilterFieldsOneOf = {
  _id?: boolean;
};

export type CategoryFilterFields = CategoryFilterFieldsOneOf | CategoryFilterFieldsOneOfTwoItem[];

export type CategoryFilterOrder = string | string[];

export interface CategoryFilter {
  offset?: number;
  limit?: number;
  skip?: number;
  order?: CategoryFilterOrder;
  fields?: CategoryFilterFields;
}

export interface LoopbackCount {
  count?: number;
}

/**
 * (tsType: Partial<User>, schemaOptions: { partial: true })
 */
export interface UserPartial {
  _id?: string;
  [key: string]: any;
 }

/**
 * (tsType: UserWithRelations, schemaOptions: { includeRelations: true })
 */
export interface UserWithRelations {
  _id?: string;
  [key: string]: any;
 }

/**
 * (tsType: Omit<User, '_id'>, schemaOptions: { title: 'NewUser', exclude: [ '_id' ] })
 */
export interface NewUser { [key: string]: any }

export interface User {
  _id?: string;
  [key: string]: any;
 }

/**
 * (tsType: Partial<Products>, schemaOptions: { partial: true })
 */
export interface ProductsPartial {
  _id?: string;
}

/**
 * (tsType: ProductsWithRelations, schemaOptions: { includeRelations: true })
 */
export interface ProductsWithRelations {
  _id?: string;
}

/**
 * (tsType: Omit<Products, '_id'>, schemaOptions: { title: 'NewProducts', exclude: [ '_id' ] })
 */
export interface NewProducts { [key: string]: any }

export interface Products {
  _id?: string;
}

/**
 * (tsType: Partial<Inventory>, schemaOptions: { partial: true })
 */
export interface InventoryPartial {
  _id?: string;
}

/**
 * (tsType: InventoryWithRelations, schemaOptions: { includeRelations: true })
 */
export interface InventoryWithRelations {
  _id?: string;
}

/**
 * (tsType: Omit<Inventory, '_id'>, schemaOptions: { title: 'NewInventory', exclude: [ '_id' ] })
 */
export interface NewInventory { [key: string]: any }

export interface Inventory {
  _id?: string;
}

/**
 * (tsType: Partial<Category>, schemaOptions: { partial: true })
 */
export interface CategoryPartial {
  _id?: string;
}

/**
 * (tsType: CategoryWithRelations, schemaOptions: { includeRelations: true })
 */
export interface CategoryWithRelations {
  _id?: string;
}

/**
 * (tsType: Omit<Category, '_id'>, schemaOptions: { title: 'NewCategory', exclude: [ '_id' ] })
 */
export interface NewCategory { [key: string]: any }

export interface Category {
  _id?: string;
}

