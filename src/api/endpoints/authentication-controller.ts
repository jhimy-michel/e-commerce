/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from '@tanstack/react-query'
import type {
  LoginSuccess,
  LoginFailure,
  AuthenticationControllerLoginBody
} from './ecommerceApi.schemas'
import { customInstance } from '../mutator/custom-instance'
import type { ErrorType } from '../mutator/custom-instance'



/**
 * Response codes: 

    200: Indicates that the request has succeeded. 

    401: Indicates that the credentials provided are wrong. 

 */
export const authenticationControllerLogin = (
    authenticationControllerLoginBody: AuthenticationControllerLoginBody,
 ) => {
      return customInstance<LoginSuccess>(
      {url: `/auth/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: authenticationControllerLoginBody
    },
      );
    }
  


    export type AuthenticationControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authenticationControllerLogin>>>
    export type AuthenticationControllerLoginMutationBody = AuthenticationControllerLoginBody
    export type AuthenticationControllerLoginMutationError = ErrorType<LoginFailure>

    export const useAuthenticationControllerLogin = <TError = ErrorType<LoginFailure>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticationControllerLogin>>, TError,{data: AuthenticationControllerLoginBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticationControllerLogin>>, {data: AuthenticationControllerLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  authenticationControllerLogin(data,)
        }

      return useMutation<Awaited<ReturnType<typeof authenticationControllerLogin>>, TError, {data: AuthenticationControllerLoginBody}, TContext>(mutationFn, mutationOptions)
    }
    