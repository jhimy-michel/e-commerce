/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  InventoryControllerCountParams,
  Inventory,
  InventoryPartial,
  InventoryWithRelations,
  InventoryControllerFindByIdParams,
  NewInventory,
  InventoryControllerUpdateAllParams,
  InventoryControllerFindParams
} from './ecommerceApi.schemas'



export const inventoryControllerCount = (
    params?: InventoryControllerCountParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.get(
      `/inventories/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getInventoryControllerCountQueryKey = (params?: InventoryControllerCountParams,) => [`/inventories/count`, ...(params ? [params]: [])];

    
export type InventoryControllerCountQueryResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerCount>>>
export type InventoryControllerCountQueryError = AxiosError<unknown>

export const useInventoryControllerCount = <TData = Awaited<ReturnType<typeof inventoryControllerCount>>, TError = AxiosError<unknown>>(
 params?: InventoryControllerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof inventoryControllerCount>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInventoryControllerCountQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inventoryControllerCount>>> = ({ signal }) => inventoryControllerCount(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof inventoryControllerCount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const inventoryControllerReplaceById = (
    id: string,
    inventory: Inventory, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/inventories/${id}`,
      inventory,options
    );
  }



    export type InventoryControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerReplaceById>>>
    export type InventoryControllerReplaceByIdMutationBody = Inventory
    export type InventoryControllerReplaceByIdMutationError = AxiosError<unknown>

    export const useInventoryControllerReplaceById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inventoryControllerReplaceById>>, TError,{id: string;data: Inventory}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inventoryControllerReplaceById>>, {id: string;data: Inventory}> = (props) => {
          const {id,data} = props ?? {};

          return  inventoryControllerReplaceById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof inventoryControllerReplaceById>>, TError, {id: string;data: Inventory}, TContext>(mutationFn, mutationOptions)
    }
    export const inventoryControllerUpdateById = (
    id: string,
    inventoryPartial: InventoryPartial, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/inventories/${id}`,
      inventoryPartial,options
    );
  }



    export type InventoryControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerUpdateById>>>
    export type InventoryControllerUpdateByIdMutationBody = InventoryPartial
    export type InventoryControllerUpdateByIdMutationError = AxiosError<unknown>

    export const useInventoryControllerUpdateById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inventoryControllerUpdateById>>, TError,{id: string;data: InventoryPartial}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inventoryControllerUpdateById>>, {id: string;data: InventoryPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  inventoryControllerUpdateById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof inventoryControllerUpdateById>>, TError, {id: string;data: InventoryPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const inventoryControllerFindById = (
    id: string,
    params?: InventoryControllerFindByIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InventoryWithRelations>> => {
    return axios.get(
      `/inventories/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getInventoryControllerFindByIdQueryKey = (id: string,
    params?: InventoryControllerFindByIdParams,) => [`/inventories/${id}`, ...(params ? [params]: [])];

    
export type InventoryControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerFindById>>>
export type InventoryControllerFindByIdQueryError = AxiosError<unknown>

export const useInventoryControllerFindById = <TData = Awaited<ReturnType<typeof inventoryControllerFindById>>, TError = AxiosError<unknown>>(
 id: string,
    params?: InventoryControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof inventoryControllerFindById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInventoryControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inventoryControllerFindById>>> = ({ signal }) => inventoryControllerFindById(id,params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof inventoryControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const inventoryControllerDeleteById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/inventories/${id}`,options
    );
  }



    export type InventoryControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerDeleteById>>>
    
    export type InventoryControllerDeleteByIdMutationError = AxiosError<unknown>

    export const useInventoryControllerDeleteById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inventoryControllerDeleteById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inventoryControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  inventoryControllerDeleteById(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof inventoryControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const inventoryControllerCreate = (
    newInventory: NewInventory, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Inventory>> => {
    return axios.post(
      `/inventories`,
      newInventory,options
    );
  }



    export type InventoryControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerCreate>>>
    export type InventoryControllerCreateMutationBody = NewInventory
    export type InventoryControllerCreateMutationError = AxiosError<unknown>

    export const useInventoryControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inventoryControllerCreate>>, TError,{data: NewInventory}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inventoryControllerCreate>>, {data: NewInventory}> = (props) => {
          const {data} = props ?? {};

          return  inventoryControllerCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof inventoryControllerCreate>>, TError, {data: NewInventory}, TContext>(mutationFn, mutationOptions)
    }
    export const inventoryControllerUpdateAll = (
    inventoryPartial: InventoryPartial,
    params?: InventoryControllerUpdateAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.patch(
      `/inventories`,
      inventoryPartial,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



    export type InventoryControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerUpdateAll>>>
    export type InventoryControllerUpdateAllMutationBody = InventoryPartial
    export type InventoryControllerUpdateAllMutationError = AxiosError<unknown>

    export const useInventoryControllerUpdateAll = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof inventoryControllerUpdateAll>>, TError,{data: InventoryPartial;params?: InventoryControllerUpdateAllParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof inventoryControllerUpdateAll>>, {data: InventoryPartial;params?: InventoryControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  inventoryControllerUpdateAll(data,params,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof inventoryControllerUpdateAll>>, TError, {data: InventoryPartial;params?: InventoryControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const inventoryControllerFind = (
    params?: InventoryControllerFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<InventoryWithRelations[]>> => {
    return axios.get(
      `/inventories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getInventoryControllerFindQueryKey = (params?: InventoryControllerFindParams,) => [`/inventories`, ...(params ? [params]: [])];

    
export type InventoryControllerFindQueryResult = NonNullable<Awaited<ReturnType<typeof inventoryControllerFind>>>
export type InventoryControllerFindQueryError = AxiosError<unknown>

export const useInventoryControllerFind = <TData = Awaited<ReturnType<typeof inventoryControllerFind>>, TError = AxiosError<unknown>>(
 params?: InventoryControllerFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof inventoryControllerFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getInventoryControllerFindQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof inventoryControllerFind>>> = ({ signal }) => inventoryControllerFind(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof inventoryControllerFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

