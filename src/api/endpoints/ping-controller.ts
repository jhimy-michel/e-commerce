/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * e-commerce-api
 * e commerce api
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PingResponse
} from './ecommerceApi.schemas'


// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const pingControllerPing = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PingResponse>> => {
    return axios.get(
      `/ping`,options
    );
  }


export const getPingControllerPingQueryKey = () => [`/ping`];

    
export type PingControllerPingQueryResult = NonNullable<AsyncReturnType<typeof pingControllerPing>>
export type PingControllerPingQueryError = AxiosError<unknown>

export const usePingControllerPing = <TData = AsyncReturnType<typeof pingControllerPing>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof pingControllerPing>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getPingControllerPingQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof pingControllerPing>> = () => pingControllerPing(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof pingControllerPing>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

