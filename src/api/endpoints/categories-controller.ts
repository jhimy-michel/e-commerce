/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * e-commerce-api
 * e commerce api
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  CategoriesControllerCountParams,
  Category,
  CategoryPartial,
  CategoryWithRelations,
  CategoriesControllerFindByIdParams,
  NewCategory,
  CategoriesControllerUpdateAllParams,
  CategoriesControllerFindParams
} from './ecommerceApi.schemas'



export const categoriesControllerCount = (
    params?: CategoriesControllerCountParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.get(
      `/categories/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCategoriesControllerCountQueryKey = (params?: CategoriesControllerCountParams,) => [`/categories/count`, ...(params ? [params]: [])];

    
export type CategoriesControllerCountQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerCount>>>
export type CategoriesControllerCountQueryError = AxiosError<unknown>

export const useCategoriesControllerCount = <TData = Awaited<ReturnType<typeof categoriesControllerCount>>, TError = AxiosError<unknown>>(
 params?: CategoriesControllerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof categoriesControllerCount>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCategoriesControllerCountQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesControllerCount>>> = ({ signal }) => categoriesControllerCount(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof categoriesControllerCount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const categoriesControllerReplaceById = (
    id: string,
    category: Category, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/categories/${id}`,
      category,options
    );
  }



    export type CategoriesControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerReplaceById>>>
    export type CategoriesControllerReplaceByIdMutationBody = Category
    export type CategoriesControllerReplaceByIdMutationError = AxiosError<unknown>

    export const useCategoriesControllerReplaceById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesControllerReplaceById>>, TError,{id: string;data: Category}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesControllerReplaceById>>, {id: string;data: Category}> = (props) => {
          const {id,data} = props ?? {};

          return  categoriesControllerReplaceById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof categoriesControllerReplaceById>>, TError, {id: string;data: Category}, TContext>(mutationFn, mutationOptions)
    }
    export const categoriesControllerUpdateById = (
    id: string,
    categoryPartial: CategoryPartial, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/categories/${id}`,
      categoryPartial,options
    );
  }



    export type CategoriesControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerUpdateById>>>
    export type CategoriesControllerUpdateByIdMutationBody = CategoryPartial
    export type CategoriesControllerUpdateByIdMutationError = AxiosError<unknown>

    export const useCategoriesControllerUpdateById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesControllerUpdateById>>, TError,{id: string;data: CategoryPartial}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesControllerUpdateById>>, {id: string;data: CategoryPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  categoriesControllerUpdateById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof categoriesControllerUpdateById>>, TError, {id: string;data: CategoryPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const categoriesControllerFindById = (
    id: string,
    params?: CategoriesControllerFindByIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CategoryWithRelations>> => {
    return axios.get(
      `/categories/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCategoriesControllerFindByIdQueryKey = (id: string,
    params?: CategoriesControllerFindByIdParams,) => [`/categories/${id}`, ...(params ? [params]: [])];

    
export type CategoriesControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerFindById>>>
export type CategoriesControllerFindByIdQueryError = AxiosError<unknown>

export const useCategoriesControllerFindById = <TData = Awaited<ReturnType<typeof categoriesControllerFindById>>, TError = AxiosError<unknown>>(
 id: string,
    params?: CategoriesControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof categoriesControllerFindById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCategoriesControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesControllerFindById>>> = ({ signal }) => categoriesControllerFindById(id,params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof categoriesControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const categoriesControllerDeleteById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/categories/${id}`,options
    );
  }



    export type CategoriesControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerDeleteById>>>
    
    export type CategoriesControllerDeleteByIdMutationError = AxiosError<unknown>

    export const useCategoriesControllerDeleteById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesControllerDeleteById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  categoriesControllerDeleteById(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof categoriesControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const categoriesControllerCreate = (
    newCategory: NewCategory, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Category>> => {
    return axios.post(
      `/categories`,
      newCategory,options
    );
  }



    export type CategoriesControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerCreate>>>
    export type CategoriesControllerCreateMutationBody = NewCategory
    export type CategoriesControllerCreateMutationError = AxiosError<unknown>

    export const useCategoriesControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesControllerCreate>>, TError,{data: NewCategory}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesControllerCreate>>, {data: NewCategory}> = (props) => {
          const {data} = props ?? {};

          return  categoriesControllerCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof categoriesControllerCreate>>, TError, {data: NewCategory}, TContext>(mutationFn, mutationOptions)
    }
    export const categoriesControllerUpdateAll = (
    categoryPartial: CategoryPartial,
    params?: CategoriesControllerUpdateAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.patch(
      `/categories`,
      categoryPartial,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



    export type CategoriesControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerUpdateAll>>>
    export type CategoriesControllerUpdateAllMutationBody = CategoryPartial
    export type CategoriesControllerUpdateAllMutationError = AxiosError<unknown>

    export const useCategoriesControllerUpdateAll = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesControllerUpdateAll>>, TError,{data: CategoryPartial;params?: CategoriesControllerUpdateAllParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesControllerUpdateAll>>, {data: CategoryPartial;params?: CategoriesControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  categoriesControllerUpdateAll(data,params,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof categoriesControllerUpdateAll>>, TError, {data: CategoryPartial;params?: CategoriesControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const categoriesControllerFind = (
    params?: CategoriesControllerFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CategoryWithRelations[]>> => {
    return axios.get(
      `/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCategoriesControllerFindQueryKey = (params?: CategoriesControllerFindParams,) => [`/categories`, ...(params ? [params]: [])];

    
export type CategoriesControllerFindQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesControllerFind>>>
export type CategoriesControllerFindQueryError = AxiosError<unknown>

export const useCategoriesControllerFind = <TData = Awaited<ReturnType<typeof categoriesControllerFind>>, TError = AxiosError<unknown>>(
 params?: CategoriesControllerFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof categoriesControllerFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCategoriesControllerFindQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesControllerFind>>> = ({ signal }) => categoriesControllerFind(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof categoriesControllerFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

