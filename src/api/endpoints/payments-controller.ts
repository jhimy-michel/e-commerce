/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  PaymentsControllerCountParams,
  Payment,
  PaymentPartial,
  PaymentWithRelations,
  PaymentsControllerFindByIdParams,
  NewPayment,
  PaymentsControllerUpdateAllParams,
  PaymentsControllerFindParams
} from './ecommerceApi.schemas'
import { customInstance } from '../mutator/custom-instance'
import type { ErrorType } from '../mutator/custom-instance'



export const paymentsControllerCount = (
    params?: PaymentsControllerCountParams,
 signal?: AbortSignal
) => {
      return customInstance<LoopbackCount>(
      {url: `/payments/count`, method: 'get',
        params, signal
    },
      );
    }
  

export const getPaymentsControllerCountQueryKey = (params?: PaymentsControllerCountParams,) => [`/payments/count`, ...(params ? [params]: [])];

    
export type PaymentsControllerCountQueryResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerCount>>>
export type PaymentsControllerCountQueryError = ErrorType<unknown>

export const usePaymentsControllerCount = <TData = Awaited<ReturnType<typeof paymentsControllerCount>>, TError = ErrorType<unknown>>(
 params?: PaymentsControllerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentsControllerCountQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerCount>>> = ({ signal }) => paymentsControllerCount(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof paymentsControllerCount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const paymentsControllerReplaceById = (
    id: string,
    payment: Payment,
 ) => {
      return customInstance<void>(
      {url: `/payments/${id}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: payment
    },
      );
    }
  


    export type PaymentsControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerReplaceById>>>
    export type PaymentsControllerReplaceByIdMutationBody = Payment
    export type PaymentsControllerReplaceByIdMutationError = ErrorType<unknown>

    export const usePaymentsControllerReplaceById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsControllerReplaceById>>, TError,{id: string;data: Payment}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsControllerReplaceById>>, {id: string;data: Payment}> = (props) => {
          const {id,data} = props ?? {};

          return  paymentsControllerReplaceById(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof paymentsControllerReplaceById>>, TError, {id: string;data: Payment}, TContext>(mutationFn, mutationOptions)
    }
    export const paymentsControllerUpdateById = (
    id: string,
    paymentPartial: PaymentPartial,
 ) => {
      return customInstance<void>(
      {url: `/payments/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: paymentPartial
    },
      );
    }
  


    export type PaymentsControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerUpdateById>>>
    export type PaymentsControllerUpdateByIdMutationBody = PaymentPartial
    export type PaymentsControllerUpdateByIdMutationError = ErrorType<unknown>

    export const usePaymentsControllerUpdateById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsControllerUpdateById>>, TError,{id: string;data: PaymentPartial}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsControllerUpdateById>>, {id: string;data: PaymentPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  paymentsControllerUpdateById(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof paymentsControllerUpdateById>>, TError, {id: string;data: PaymentPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const paymentsControllerFindById = (
    id: string,
    params?: PaymentsControllerFindByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<PaymentWithRelations>(
      {url: `/payments/${id}`, method: 'get',
        params, signal
    },
      );
    }
  

export const getPaymentsControllerFindByIdQueryKey = (id: string,
    params?: PaymentsControllerFindByIdParams,) => [`/payments/${id}`, ...(params ? [params]: [])];

    
export type PaymentsControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerFindById>>>
export type PaymentsControllerFindByIdQueryError = ErrorType<unknown>

export const usePaymentsControllerFindById = <TData = Awaited<ReturnType<typeof paymentsControllerFindById>>, TError = ErrorType<unknown>>(
 id: string,
    params?: PaymentsControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFindById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentsControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerFindById>>> = ({ signal }) => paymentsControllerFindById(id,params, signal);

  const query = useQuery<Awaited<ReturnType<typeof paymentsControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const paymentsControllerDeleteById = (
    id: string,
 ) => {
      return customInstance<void>(
      {url: `/payments/${id}`, method: 'delete'
    },
      );
    }
  


    export type PaymentsControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerDeleteById>>>
    
    export type PaymentsControllerDeleteByIdMutationError = ErrorType<unknown>

    export const usePaymentsControllerDeleteById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsControllerDeleteById>>, TError,{id: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  paymentsControllerDeleteById(id,)
        }

      return useMutation<Awaited<ReturnType<typeof paymentsControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const paymentsControllerCreate = (
    newPayment: NewPayment,
 ) => {
      return customInstance<Payment>(
      {url: `/payments`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: newPayment
    },
      );
    }
  


    export type PaymentsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerCreate>>>
    export type PaymentsControllerCreateMutationBody = NewPayment
    export type PaymentsControllerCreateMutationError = ErrorType<unknown>

    export const usePaymentsControllerCreate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsControllerCreate>>, TError,{data: NewPayment}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsControllerCreate>>, {data: NewPayment}> = (props) => {
          const {data} = props ?? {};

          return  paymentsControllerCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof paymentsControllerCreate>>, TError, {data: NewPayment}, TContext>(mutationFn, mutationOptions)
    }
    export const paymentsControllerUpdateAll = (
    paymentPartial: PaymentPartial,
    params?: PaymentsControllerUpdateAllParams,
 ) => {
      return customInstance<LoopbackCount>(
      {url: `/payments`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: paymentPartial,
        params
    },
      );
    }
  


    export type PaymentsControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerUpdateAll>>>
    export type PaymentsControllerUpdateAllMutationBody = PaymentPartial
    export type PaymentsControllerUpdateAllMutationError = ErrorType<unknown>

    export const usePaymentsControllerUpdateAll = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsControllerUpdateAll>>, TError,{data: PaymentPartial;params?: PaymentsControllerUpdateAllParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsControllerUpdateAll>>, {data: PaymentPartial;params?: PaymentsControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  paymentsControllerUpdateAll(data,params,)
        }

      return useMutation<Awaited<ReturnType<typeof paymentsControllerUpdateAll>>, TError, {data: PaymentPartial;params?: PaymentsControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const paymentsControllerFind = (
    params?: PaymentsControllerFindParams,
 signal?: AbortSignal
) => {
      return customInstance<PaymentWithRelations[]>(
      {url: `/payments`, method: 'get',
        params, signal
    },
      );
    }
  

export const getPaymentsControllerFindQueryKey = (params?: PaymentsControllerFindParams,) => [`/payments`, ...(params ? [params]: [])];

    
export type PaymentsControllerFindQueryResult = NonNullable<Awaited<ReturnType<typeof paymentsControllerFind>>>
export type PaymentsControllerFindQueryError = ErrorType<unknown>

export const usePaymentsControllerFind = <TData = Awaited<ReturnType<typeof paymentsControllerFind>>, TError = ErrorType<unknown>>(
 params?: PaymentsControllerFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof paymentsControllerFind>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPaymentsControllerFindQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsControllerFind>>> = ({ signal }) => paymentsControllerFind(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof paymentsControllerFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

