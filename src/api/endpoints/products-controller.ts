/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  ProductsControllerCountParams,
  Products,
  ProductsPartial,
  ProductsWithRelations,
  ProductsControllerFindByIdParams,
  NewProducts,
  ProductsControllerUpdateAllParams,
  ProductsControllerFindParams
} from './ecommerceApi.schemas'



export const productsControllerCount = (
    params?: ProductsControllerCountParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.get(
      `/products/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getProductsControllerCountQueryKey = (params?: ProductsControllerCountParams,) => [`/products/count`, ...(params ? [params]: [])];

    
export type ProductsControllerCountQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerCount>>>
export type ProductsControllerCountQueryError = AxiosError<unknown>

export const useProductsControllerCount = <TData = Awaited<ReturnType<typeof productsControllerCount>>, TError = AxiosError<unknown>>(
 params?: ProductsControllerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerCount>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProductsControllerCountQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerCount>>> = ({ signal }) => productsControllerCount(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof productsControllerCount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const productsControllerReplaceById = (
    id: string,
    products: Products, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/products/${id}`,
      products,options
    );
  }



    export type ProductsControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerReplaceById>>>
    export type ProductsControllerReplaceByIdMutationBody = Products
    export type ProductsControllerReplaceByIdMutationError = AxiosError<unknown>

    export const useProductsControllerReplaceById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerReplaceById>>, TError,{id: string;data: Products}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerReplaceById>>, {id: string;data: Products}> = (props) => {
          const {id,data} = props ?? {};

          return  productsControllerReplaceById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof productsControllerReplaceById>>, TError, {id: string;data: Products}, TContext>(mutationFn, mutationOptions)
    }
    export const productsControllerUpdateById = (
    id: string,
    productsPartial: ProductsPartial, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/products/${id}`,
      productsPartial,options
    );
  }



    export type ProductsControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdateById>>>
    export type ProductsControllerUpdateByIdMutationBody = ProductsPartial
    export type ProductsControllerUpdateByIdMutationError = AxiosError<unknown>

    export const useProductsControllerUpdateById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdateById>>, TError,{id: string;data: ProductsPartial}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerUpdateById>>, {id: string;data: ProductsPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  productsControllerUpdateById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof productsControllerUpdateById>>, TError, {id: string;data: ProductsPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const productsControllerFindById = (
    id: string,
    params?: ProductsControllerFindByIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductsWithRelations>> => {
    return axios.get(
      `/products/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getProductsControllerFindByIdQueryKey = (id: string,
    params?: ProductsControllerFindByIdParams,) => [`/products/${id}`, ...(params ? [params]: [])];

    
export type ProductsControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindById>>>
export type ProductsControllerFindByIdQueryError = AxiosError<unknown>

export const useProductsControllerFindById = <TData = Awaited<ReturnType<typeof productsControllerFindById>>, TError = AxiosError<unknown>>(
 id: string,
    params?: ProductsControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProductsControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFindById>>> = ({ signal }) => productsControllerFindById(id,params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof productsControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const productsControllerDeleteById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/products/${id}`,options
    );
  }



    export type ProductsControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerDeleteById>>>
    
    export type ProductsControllerDeleteByIdMutationError = AxiosError<unknown>

    export const useProductsControllerDeleteById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerDeleteById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  productsControllerDeleteById(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof productsControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const productsControllerCreate = (
    newProducts: NewProducts, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Products>> => {
    return axios.post(
      `/products`,
      newProducts,options
    );
  }



    export type ProductsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerCreate>>>
    export type ProductsControllerCreateMutationBody = NewProducts
    export type ProductsControllerCreateMutationError = AxiosError<unknown>

    export const useProductsControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: NewProducts}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerCreate>>, {data: NewProducts}> = (props) => {
          const {data} = props ?? {};

          return  productsControllerCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof productsControllerCreate>>, TError, {data: NewProducts}, TContext>(mutationFn, mutationOptions)
    }
    export const productsControllerUpdateAll = (
    productsPartial: ProductsPartial,
    params?: ProductsControllerUpdateAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.patch(
      `/products`,
      productsPartial,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



    export type ProductsControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdateAll>>>
    export type ProductsControllerUpdateAllMutationBody = ProductsPartial
    export type ProductsControllerUpdateAllMutationError = AxiosError<unknown>

    export const useProductsControllerUpdateAll = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdateAll>>, TError,{data: ProductsPartial;params?: ProductsControllerUpdateAllParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerUpdateAll>>, {data: ProductsPartial;params?: ProductsControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  productsControllerUpdateAll(data,params,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof productsControllerUpdateAll>>, TError, {data: ProductsPartial;params?: ProductsControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const productsControllerFind = (
    params?: ProductsControllerFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductsWithRelations[]>> => {
    return axios.get(
      `/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getProductsControllerFindQueryKey = (params?: ProductsControllerFindParams,) => [`/products`, ...(params ? [params]: [])];

    
export type ProductsControllerFindQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFind>>>
export type ProductsControllerFindQueryError = AxiosError<unknown>

export const useProductsControllerFind = <TData = Awaited<ReturnType<typeof productsControllerFind>>, TError = AxiosError<unknown>>(
 params?: ProductsControllerFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProductsControllerFindQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFind>>> = ({ signal }) => productsControllerFind(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof productsControllerFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

