/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  UsersControllerCountUsersParams,
  User,
  UserPartial,
  UserWithRelations,
  UsersControllerFindByIdParams,
  NewUser,
  UsersControllerUpdateAllParams,
  UsersControllerListUsersParams
} from './ecommerceApi.schemas'
import { customInstance } from '../mutator/custom-instance'
import type { ErrorType } from '../mutator/custom-instance'



export const usersControllerCountUsers = (
    params?: UsersControllerCountUsersParams,
 signal?: AbortSignal
) => {
      return customInstance<LoopbackCount>(
      {url: `/users/count`, method: 'get',
        params, signal
    },
      );
    }
  

export const getUsersControllerCountUsersQueryKey = (params?: UsersControllerCountUsersParams,) => [`/users/count`, ...(params ? [params]: [])];

    
export type UsersControllerCountUsersQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerCountUsers>>>
export type UsersControllerCountUsersQueryError = ErrorType<unknown>

export const useUsersControllerCountUsers = <TData = Awaited<ReturnType<typeof usersControllerCountUsers>>, TError = ErrorType<unknown>>(
 params?: UsersControllerCountUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerCountUsers>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerCountUsersQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerCountUsers>>> = ({ signal }) => usersControllerCountUsers(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof usersControllerCountUsers>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usersControllerReplaceById = (
    id: string,
    user: User,
 ) => {
      return customInstance<void>(
      {url: `/users/${id}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      );
    }
  


    export type UsersControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerReplaceById>>>
    export type UsersControllerReplaceByIdMutationBody = User
    export type UsersControllerReplaceByIdMutationError = ErrorType<unknown>

    export const useUsersControllerReplaceById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerReplaceById>>, TError,{id: string;data: User}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerReplaceById>>, {id: string;data: User}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerReplaceById(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerReplaceById>>, TError, {id: string;data: User}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerUpdateById = (
    id: string,
    userPartial: UserPartial,
 ) => {
      return customInstance<void>(
      {url: `/users/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: userPartial
    },
      );
    }
  


    export type UsersControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateById>>>
    export type UsersControllerUpdateByIdMutationBody = UserPartial
    export type UsersControllerUpdateByIdMutationError = ErrorType<unknown>

    export const useUsersControllerUpdateById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateById>>, TError,{id: string;data: UserPartial}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateById>>, {id: string;data: UserPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerUpdateById(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerUpdateById>>, TError, {id: string;data: UserPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerFindById = (
    id: string,
    params?: UsersControllerFindByIdParams,
 signal?: AbortSignal
) => {
      return customInstance<UserWithRelations>(
      {url: `/users/${id}`, method: 'get',
        params, signal
    },
      );
    }
  

export const getUsersControllerFindByIdQueryKey = (id: string,
    params?: UsersControllerFindByIdParams,) => [`/users/${id}`, ...(params ? [params]: [])];

    
export type UsersControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindById>>>
export type UsersControllerFindByIdQueryError = ErrorType<unknown>

export const useUsersControllerFindById = <TData = Awaited<ReturnType<typeof usersControllerFindById>>, TError = ErrorType<unknown>>(
 id: string,
    params?: UsersControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindById>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindById>>> = ({ signal }) => usersControllerFindById(id,params, signal);

  const query = useQuery<Awaited<ReturnType<typeof usersControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usersControllerDeleteById = (
    id: string,
 ) => {
      return customInstance<void>(
      {url: `/users/${id}`, method: 'delete'
    },
      );
    }
  


    export type UsersControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerDeleteById>>>
    
    export type UsersControllerDeleteByIdMutationError = ErrorType<unknown>

    export const useUsersControllerDeleteById = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerDeleteById>>, TError,{id: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersControllerDeleteById(id,)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerCreateUser = (
    newUser: NewUser,
 ) => {
      return customInstance<User>(
      {url: `/users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: newUser
    },
      );
    }
  


    export type UsersControllerCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreateUser>>>
    export type UsersControllerCreateUserMutationBody = NewUser
    export type UsersControllerCreateUserMutationError = ErrorType<unknown>

    export const useUsersControllerCreateUser = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreateUser>>, TError,{data: NewUser}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreateUser>>, {data: NewUser}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerCreateUser(data,)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerCreateUser>>, TError, {data: NewUser}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerUpdateAll = (
    userPartial: UserPartial,
    params?: UsersControllerUpdateAllParams,
 ) => {
      return customInstance<LoopbackCount>(
      {url: `/users`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: userPartial,
        params
    },
      );
    }
  


    export type UsersControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateAll>>>
    export type UsersControllerUpdateAllMutationBody = UserPartial
    export type UsersControllerUpdateAllMutationError = ErrorType<unknown>

    export const useUsersControllerUpdateAll = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateAll>>, TError,{data: UserPartial;params?: UsersControllerUpdateAllParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateAll>>, {data: UserPartial;params?: UsersControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  usersControllerUpdateAll(data,params,)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerUpdateAll>>, TError, {data: UserPartial;params?: UsersControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerListUsers = (
    params?: UsersControllerListUsersParams,
 signal?: AbortSignal
) => {
      return customInstance<UserWithRelations[]>(
      {url: `/users`, method: 'get',
        params, signal
    },
      );
    }
  

export const getUsersControllerListUsersQueryKey = (params?: UsersControllerListUsersParams,) => [`/users`, ...(params ? [params]: [])];

    
export type UsersControllerListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerListUsers>>>
export type UsersControllerListUsersQueryError = ErrorType<unknown>

export const useUsersControllerListUsers = <TData = Awaited<ReturnType<typeof usersControllerListUsers>>, TError = ErrorType<unknown>>(
 params?: UsersControllerListUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerListUsers>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerListUsersQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerListUsers>>> = ({ signal }) => usersControllerListUsers(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof usersControllerListUsers>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

