/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * Ecommerce API
 * API for e commerce App
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  LoopbackCount,
  UsersControllerCountParams,
  User,
  UserPartial,
  UserWithRelations,
  UsersControllerFindByIdParams,
  NewUser,
  UsersControllerUpdateAllParams,
  UsersControllerFindParams
} from './ecommerceApi.schemas'



export const usersControllerCount = (
    params?: UsersControllerCountParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.get(
      `/users/count`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersControllerCountQueryKey = (params?: UsersControllerCountParams,) => [`/users/count`, ...(params ? [params]: [])];

    
export type UsersControllerCountQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerCount>>>
export type UsersControllerCountQueryError = AxiosError<unknown>

export const useUsersControllerCount = <TData = Awaited<ReturnType<typeof usersControllerCount>>, TError = AxiosError<unknown>>(
 params?: UsersControllerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerCount>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerCountQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerCount>>> = ({ signal }) => usersControllerCount(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof usersControllerCount>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usersControllerReplaceById = (
    id: string,
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `/users/${id}`,
      user,options
    );
  }



    export type UsersControllerReplaceByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerReplaceById>>>
    export type UsersControllerReplaceByIdMutationBody = User
    export type UsersControllerReplaceByIdMutationError = AxiosError<unknown>

    export const useUsersControllerReplaceById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerReplaceById>>, TError,{id: string;data: User}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerReplaceById>>, {id: string;data: User}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerReplaceById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerReplaceById>>, TError, {id: string;data: User}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerUpdateById = (
    id: string,
    userPartial: UserPartial, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/users/${id}`,
      userPartial,options
    );
  }



    export type UsersControllerUpdateByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateById>>>
    export type UsersControllerUpdateByIdMutationBody = UserPartial
    export type UsersControllerUpdateByIdMutationError = AxiosError<unknown>

    export const useUsersControllerUpdateById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateById>>, TError,{id: string;data: UserPartial}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateById>>, {id: string;data: UserPartial}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerUpdateById(id,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerUpdateById>>, TError, {id: string;data: UserPartial}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerFindById = (
    id: string,
    params?: UsersControllerFindByIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserWithRelations>> => {
    return axios.get(
      `/users/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersControllerFindByIdQueryKey = (id: string,
    params?: UsersControllerFindByIdParams,) => [`/users/${id}`, ...(params ? [params]: [])];

    
export type UsersControllerFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindById>>>
export type UsersControllerFindByIdQueryError = AxiosError<unknown>

export const useUsersControllerFindById = <TData = Awaited<ReturnType<typeof usersControllerFindById>>, TError = AxiosError<unknown>>(
 id: string,
    params?: UsersControllerFindByIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindById>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindByIdQueryKey(id,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindById>>> = ({ signal }) => usersControllerFindById(id,params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof usersControllerFindById>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usersControllerDeleteById = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/users/${id}`,options
    );
  }



    export type UsersControllerDeleteByIdMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerDeleteById>>>
    
    export type UsersControllerDeleteByIdMutationError = AxiosError<unknown>

    export const useUsersControllerDeleteById = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerDeleteById>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerDeleteById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersControllerDeleteById(id,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerDeleteById>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerCreate = (
    newUser: NewUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.post(
      `/users`,
      newUser,options
    );
  }



    export type UsersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreate>>>
    export type UsersControllerCreateMutationBody = NewUser
    export type UsersControllerCreateMutationError = AxiosError<unknown>

    export const useUsersControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: NewUser}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreate>>, {data: NewUser}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerCreate(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerCreate>>, TError, {data: NewUser}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerUpdateAll = (
    userPartial: UserPartial,
    params?: UsersControllerUpdateAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LoopbackCount>> => {
    return axios.patch(
      `/users`,
      userPartial,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



    export type UsersControllerUpdateAllMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateAll>>>
    export type UsersControllerUpdateAllMutationBody = UserPartial
    export type UsersControllerUpdateAllMutationError = AxiosError<unknown>

    export const useUsersControllerUpdateAll = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateAll>>, TError,{data: UserPartial;params?: UsersControllerUpdateAllParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateAll>>, {data: UserPartial;params?: UsersControllerUpdateAllParams}> = (props) => {
          const {data,params} = props ?? {};

          return  usersControllerUpdateAll(data,params,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersControllerUpdateAll>>, TError, {data: UserPartial;params?: UsersControllerUpdateAllParams}, TContext>(mutationFn, mutationOptions)
    }
    export const usersControllerFind = (
    params?: UsersControllerFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserWithRelations[]>> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersControllerFindQueryKey = (params?: UsersControllerFindParams,) => [`/users`, ...(params ? [params]: [])];

    
export type UsersControllerFindQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFind>>>
export type UsersControllerFindQueryError = AxiosError<unknown>

export const useUsersControllerFind = <TData = Awaited<ReturnType<typeof usersControllerFind>>, TError = AxiosError<unknown>>(
 params?: UsersControllerFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersControllerFindQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFind>>> = ({ signal }) => usersControllerFind(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof usersControllerFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

